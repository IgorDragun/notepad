class Link < Post

  # Конструктор
  def initialize
    # Вызовем конструктор родительского класса
    super
    # Дополнительно инициализируем специфичное для этого класса поле
    @url = ""
  end


  # Метод для считывания ввода от пользователя и записи его в нужные поля объекта
  # Переопределяем метод родительского класса
  def read_from_console
    # Просим у пользователя адрес ссылки
    puts "Введите адрес ссылки:"
    @url = STDIN.gets.chomp
    # Просим у пользователя описание ссылки (одной строки будет достаточно)
    puts "Напишите пару слов о том, куда ведет данная ссылка:"
    @text = STDIN.gets.chomp
  end


  # Метод для подготовки данных и возврата состояния объекта в виде массива строк для записи в файл
  # Переопределяем метод родительского класса
  def to_strings
    # Создаем файл и записываем туда время записи, ссылку и описание ссылки
    time_string = "Создано: #{@created_at.strftime("%Y.%m.%d, %H:%M")}.\n\r"

    [time_string, @url, @text]
  end


  def to_db_hash
    # Получаем предзаполненных родительских классом хэш и добавляем туда значения дочернего класса
    return super.merge(
      {
        "text" => @text,
        "url" => @url
      }
    )
  end


  # Метод для наполнения объекта данными из базы данных
  def load_data(data_hash)
    # Сперва вызываем родительский метод
    super(data_hash)

    # Затем наполняем свои специфичные поля
    @url = data_hash["url"]
  end

end