# Создадим базовый (родительский) класс "Запись"
# Этот класс задает основные методы и свойства, присущие всем разновидностям записей
class Post
  # Конструктор
  def initialize
    @text = [] # Массив строк для записи в файл
    @created_at = Time.now # Дата создания записи
  end

  # Определим статический метод для отображения пользователю вариантов создоваемых записей
  # В идеале родительский класс не должен зависеть от своих конкретных детей,
  # но для простоты сделаем так (метод адекватен поставленной задаче)
  def self.post_types
    [Memo, Task, Link]
  end

  # Определим метод для создания записи определенного вида (создания объекта дочернего класса)
  def self.create(type_index)
    return post_types[type_index].new
  end

  # Определим методы экземпляра класса
  # Метод для считывания ввода от пользователя и записи его в нужные поля объекта
  def read_from_console
    # Абстрактный метод
    # Будет реализован в класса-потомках, которые знают как нужно считывать данные из консоли
  end

  # Метод для подготовки данных и возврата состояния объекта в виде массива строк для записи в файл
  def to_strings
    # Абстрактный метод
    # Будет реализован в классах-потомках, которые знают, как сохранять данные в файл
  end

  # Метод, который записывает текущее состояние объекта в файл
  def save
    file = File.new(file_path, "w")
    to_strings.each {|string| file.puts(string)}
    file.close
  end

  # Метод, возвращающий путь к файлу, куда нужно записать объект
  def file_path
    current_path = File.dirname(__FILE__)
    file_name = @created_at.strftime("#{self.class.name}_%Y-%m-%d_%H-%M-%S.txt")

    "#{current_path}/#{file_name}"
  end
end